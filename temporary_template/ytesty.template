<STYLE>
  BODY, TABLE, TD, TH, P {
    font-family: Calibri, Verdana, Helvetica, sans serif;
    font-size: 12px;
    color: black;
  }
  .console {
    font-family: Courier New;
  }
  .filesChanged {
    width: 10%;
    padding-left: 10px;
  }
  .section {
    width: 100%;
    border: thin black dotted;
  }
  .td-title-main {
    color: white;
    font-size: 200%;
    padding-left: 5px;
    font-weight: bold;
  }
  .td-title {
    color: white;
    font-size: 120%;
    font-weight: bold;
    padding-left: 5px;
    text-transform: uppercase;
  }
  .td-title-tests {
    font-weight: bold;
    font-size: 120%;
  }
  .td-header-maven-module {
    font-weight: bold;
    font-size: 120%;    
  }
  .td-maven-artifact {
    padding-left: 5px;
  }
  .tr-title {
    background-color: <%= (build.result == null || build.result.toString() == 'SUCCESS') ? '#27AE60' : build.result.toString() == 'FAILURE' ? '#E74C3C' : '#f4e242' %>;
  }
  .test {
    padding-left: 20px;
  }
  .test-fixed {
    color: #27AE60;
  }
  .test-failed {
    color: #E74C3C;
  }
</STYLE>
<BODY>
  <!-- BUILD RESULT -->
  <table class="section" border="1">
    <tr class="tr-title">
      <td class="td-title-main" colspan=2>
        BUILD ${build.result ?: 'COMPLETED'}
      </td>
    </tr>
    <tr>
      <td>URL:</td>
      <td><A href="${rooturl}${build.url}">${rooturl}${build.url}</A></td>
    </tr>
    <tr>
      <td>Project:</td>
      <td>${project.name}</td>
    </tr>
    <tr>
      <td>Date:</td>
      <td>${it.timestampString}</td>
    </tr>
    <tr>
      <td>Duration:</td>
      <td>${build.durationString}</td>
    </tr>
    <tr>
      <td>Duration of flash:</td>
      <td>1 hr 35 min 50 sec</td>
    </tr>
<!--
    <tr>
      <td>Duration of download:</td>
      <td>download_duration</td>
    </tr>
-->
    <tr>
      <td>Duration of test:</td>
      <td>10 min 0 sec</td>
    </tr>
    <tr>
      <td>Cause:</td>
      <td><% build.causes.each() { cause -> %> ${cause.shortDescription} <%  } %></td>
    </tr>
    <tr>
      <td>AOSP URL:</td>
      <td><A href="http://mkmartifactory.amd.com/artifactory/atg-mero-generic-local/SRDC/AOSP/mero-dev_p/jenkins-SRDC-nightly_aosp_mero-dev_p-107/">http://mkmartifactory.amd.com/artifactory/atg-mero-generic-local/SRDC/AOSP/mero-dev_p/jenkins-SRDC-nightly_aosp_mero-dev_p-107/</A></td>
    </tr>
    <tr>
      <td>BIOS:</td>
      <td>UMD9830N</td>
    </tr>
  </table>
  <br/>

<!-- TEST RESULTS SUMMARY -->

  <%
  def junitResultList1 = it.JUnitTestResult
  try {
    def cucumberTestResultAction1 = it.getAction("org.jenkinsci.plugins.cucumber.jsontestsupport.CucumberTestResultAction")
    junitResultList1.add( cucumberTestResultAction1.getResult() )
  } catch(e) {
    //cucumberTestResultAction not exist in this build
  }
  if ( junitResultList1.size() > 0 ) { %>
      <table class="section" border="1">
          <tr class="tr-title">
              <td class="td-title" colspan="3">${junitResultList1.first().displayName} Summary</td>
          </tr>

      <!-- search the module, if find, exclude it in passcount or failcount; else nothing to do  -->
        <%def int log_passcount = 0 
          def int log_failcount = 0
          def junitResultList4 = new ArrayList() 
          def excludeList = new ArrayList<String>()
              excludeList.add("test_kill_")
          junitResultList1.each {
              junitResult -> junitResult.getChildren().each {
                  packageResult -> 
                  if (packageResult.getName().contains(excludeList[0])){
                      junitResultList4.add(packageResult)
                  }
              } 
          }%>


        <%if (junitResultList4.size() > 0) {%>
              <tr>
                  <td class="td-title-tests"> Pass rate:${Math.round((junitResultList1[0].getPassCount() - junitResultList4[0].getPassCount())/(junitResultList1[0].getTotalCount() - 1)*100)}%</td>
                  <td class="td-title-tests" ${junitResultList1[0].getPassCount() != junitResultList1[0].getTotalCount()?'bgcolor="green"':''}> Pass:${junitResultList1[0].getPassCount() - junitResultList4[0].getPassCount()}</td>
                  <td class="td-title-tests" ${junitResultList1[0].getFailCount() > 0 ? 'bgcolor="red"':''}> Fail:${junitResultList1[0].getFailCount() - junitResultList4[0].getFailCount()}</td>
              </tr>
        <%}%>

        <%if (junitResultList4.size() == 0) {%>
              <tr>
                  <td class="td-title-tests"> Pass rate:${Math.round(junitResultList1[0].getPassCount()/junitResultList1[0].getTotalCount()*100)}%</td>
                  <td class="td-title-tests" ${junitResultList1[0].getPassCount() != junitResultList1[0].getTotalCount()?'bgcolor="green"':''}> Pass:${junitResultList1[0].getPassCount()}</td>
                  <td class="td-title-tests" ${junitResultList1[0].getFailCount() > 0 ? 'bgcolor="red"':''}> Fail:${junitResultList1[0].getFailCount()}</td>
              </tr>
        <%}%>
      <!-- END: search the module, if find, exclude it in passcount or failcount; else nothing to do  -->

          <tr>
              <td class="td-title-tests">Component</td>
              <td class="td-title-tests">Items</td>
              <td class="td-title-tests">Result(Pass/Fail)</td>
          </tr>

      <!-- one by one, find module test case number in JunitResult, and merge same component column by case number -->
        <% def int dmcount2 = 0 
           def junitResultList3 = new ArrayList()
           def searchList = new ArrayList<String>()
               searchList.add("test_video_")
               searchList.add("test_audio_")
               searchList.add("test_ethernet_")
               searchList.add("test_usb_")
               searchList.add("test_storage_")
               searchList.add("test_IO_")
               searchList.add("test_boot_")
               searchList.add("test_airplane_")
               searchList.add("test_bt_")
               searchList.add("test_wifi_")
               searchList.add("test_browser_")
               searchList.add("test_suspend_resume")
           def componentList = new ArrayList<String>()
               componentList.add("Video")
               componentList.add("Audio")
               componentList.add("Ethernet")
               componentList.add("USB")
               componentList.add("Storage")
               componentList.add("IO")
               componentList.add("Boot")
               componentList.add("Airplane")
               componentList.add("BT")
               componentList.add("Wi-Fi")
               componentList.add("Browser")
               componentList.add("Suspend & Resume")
           def int j = 0
        %>
    
        <% for(j=0;j<searchList.size();j++ ) { 
               dmcount2 = 0 
               junitResultList3.clear()
               junitResultList1.each {
                   junitResult -> junitResult.getChildren().each {
                       packageResult ->
                       if (packageResult.getName().contains(searchList[j]) == true){
                           dmcount2 = dmcount2 + 1
                           junitResultList3.add(packageResult)
                       }
                   } 
               }%>
     
               <% for(i=0;dmcount2>=1 &&i!=1;i=1 ) {%> 
                      <tr>
                          <td rowspan=<%=dmcount2%> ${junitResultList3[0].getPassCount() == 1 ? '' : 'bgcolor="red"'}><%=componentList[j]%></td>
                          <td ${junitResultList3[0].getPassCount() == 1 ? '' : 'bgcolor="red"'}>${junitResultList3[0].getName()}</td>
                          <td ${junitResultList3[0].getPassCount() == 1 ? '' : 'bgcolor="red"'}>${junitResultList3[0].getPassCount() == 1? "Pass":"Fail"} </td>
                      </tr>
                      <% for (i=1;i < dmcount2;i++){%>
                             <tr>
                                 <td ${junitResultList3[i].getPassCount() == 1 ? '' : 'bgcolor="red"'}>${junitResultList3[i].getName()}</td>
                                 <td ${junitResultList3[i].getPassCount() == 1 ? '' : 'bgcolor="red"'}>${junitResultList3[i].getPassCount() == 1? "Pass":"Fail"} </td>
                             </tr>
                      <%}%>
               <%}%>
        <%}%>
      <!-- END: one by one,find module test case number in JunitResult, and merge same component column by case number -->

      <!-- multi by one, find module test case number in JunitResult, and merge same component column by case number,  -->
        <%def int dmcount1 = 0 
          def junitResultList2 = new ArrayList() 
          junitResultList1.each {
              junitResult -> junitResult.getChildren().each {
                  packageResult -> 
                  if (packageResult.getName().contains('test_dp_') == true || packageResult.getName().contains('test_display_') == true){
                      dmcount1 = dmcount1 + 1 
                      junitResultList2.add(packageResult)
                  }
              } 
          }%>
     
        <% for(i=0;dmcount1>=1 &&i!=1;i=1 ) {%> 
               <tr>
                   <td rowspan=<%=dmcount1%> ${junitResultList2[0].getPassCount() == 1 ? '' : 'bgcolor="red"'}>Display</td>
                   <td ${junitResultList2[0].getPassCount() == 1 ? '' : 'bgcolor="red"'}>${junitResultList2[0].getName()}</td>
                   <td ${junitResultList2[0].getPassCount() == 1 ? '' : 'bgcolor="red"'}>${junitResultList2[0].getPassCount() == 1? "Pass":"Fail"} </td>
               </tr>
           <% for (i=1;i < dmcount1;i++){%>
                  <tr>
                      <td ${junitResultList2[i].getPassCount() == 1 ? '' : 'bgcolor="red"'}>${junitResultList2[i].getName()}</td>
                      <td ${junitResultList2[i].getPassCount() == 1 ? '' : 'bgcolor="red"'}>${junitResultList2[i].getPassCount() == 1? "Pass":"Fail"} </td>
                  </tr>
           <% }%>
        <% }%>
      <!-- END: multi by one, search test case number of specified module in JunitResult, and merge same component column by case number,  -->

      <!-- multi by one, find module test case number in JunitResult, and merge same component column by case number,  -->
        <%dmcount1 = 0 
          junitResultList2.clear()
          junitResultList1.each {
              junitResult -> junitResult.getChildren().each {
                  packageResult ->
                  if (packageResult.getName().contains('test_image_') == true || packageResult.getName().contains('test_jpeg_image') == true || packageResult.getName().contains('test_png_image') == true){
                      dmcount1 = dmcount1 + 1 
                      junitResultList2.add(packageResult)
                  }
              }
          }%>
     
        <% for(i=0;dmcount1>=1 &&i!=1;i=1 ) {%> 
               <tr>
                   <td rowspan=<%=dmcount1%> ${junitResultList2[0].getPassCount() == 1 ? '' : 'bgcolor="red"'}>Image</td>
                   <td ${junitResultList2[0].getPassCount() == 1 ? '' : 'bgcolor="red"'}>${junitResultList2[0].getName()}</td>
                   <td ${junitResultList2[0].getPassCount() == 1 ? '' : 'bgcolor="red"'}>${junitResultList2[0].getPassCount() == 1? "Pass":"Fail"} </td>
               </tr>
               <% for (i=1;i < dmcount1;i++){%>
                      <tr>
                          <td ${junitResultList2[i].getPassCount() == 1 ? '' : 'bgcolor="red"'}>${junitResultList2[i].getName()}</td>
                          <td ${junitResultList2[i].getPassCount() == 1 ? '' : 'bgcolor="red"'}>${junitResultList2[i].getPassCount() == 1? "Pass":"Fail"} </td>
                      </tr>
               <%}%>
        <%}%>
      <!-- END: multi by one, find module test case number in JunitResult, and merge same component column by case number,  -->


  </table>
  <br/>
  <% } %>


<!-- JUnit TEMPLATE -->

  <%
  def junitResultList = it.JUnitTestResult
  try {
    def cucumberTestResultAction = it.getAction("org.jenkinsci.plugins.cucumber.jsontestsupport.CucumberTestResultAction")
    junitResultList.add( cucumberTestResultAction.getResult() )
  } catch(e) {
    //cucumberTestResultAction not exist in this build
  }
  if ( junitResultList.size() > 0 ) { %>
  <table class="section" border="1">
    <tr class="tr-title">
      <td class="td-title" colspan="5">${junitResultList.first().displayName}</td>
    </tr>
    <tr>
        <td class="td-title-tests">Name</td>
        <td class="td-title-tests">Failed</td>
        <td class="td-title-tests">Passed</td>
        <td class="td-title-tests">Skipped</td>
        <td class="td-title-tests">Total</td>
      </tr>
    <% junitResultList.each {
      junitResult -> junitResult.getChildren().each {
        packageResult -> %>
    <tr>
      <td>${packageResult.getName()}</td>
      <td>${packageResult.getFailCount()}</td>
      <td>${packageResult.getPassCount()}</td>
      <td>${packageResult.getSkipCount()}</td>
      <td>${packageResult.getPassCount() + packageResult.getFailCount() + packageResult.getSkipCount()}</td>
    </tr>
    <% packageResult.getPassedTests().findAll({it.getStatus().toString() == "FIXED";}).each{
        test -> %>
            <tr>
              <td class="test test-fixed" colspan="5">
                ${test.getFullName()} ${test.getStatus()}
              </td>
            </tr>
        <% } %>
        <% packageResult.getFailedTests().sort({a,b -> a.getAge() <=> b.getAge()}).each{
          failed_test -> %>
    <tr>
      <td class="test test-failed" colspan="5">
        ${failed_test.getFullName()} (Age: ${failed_test.getAge()})
      </td>
    </tr>
        <% }
      }
    } %>
  </table>
  <br/>
  <% } %>

  <!-- CHANGE SET -->
  <%
  def changeSets = build.changeSets
  if(changeSets != null) {
    def hadChanges = false %>
  <table class="section">
    <tr class="tr-title">
      <td class="td-title" colspan="2">CHANGES</td>
    </tr>
    <% changeSets.each() { 
      cs_list -> cs_list.each() { 
        cs -> hadChanges = true %>
    <tr>
      <td>
        Revision
        <%= cs.metaClass.hasProperty('commitId') ? cs.commitId : cs.metaClass.hasProperty('revision') ? cs.revision : cs.metaClass.hasProperty('changeNumber') ? cs.changeNumber : "" %>
        by <B><%= cs.author %></B>
      </td>
      <td>${cs.msgAnnotated}</td>
    </tr>
        <% cs.affectedFiles.each() {
          p -> %>
    <tr>
      <td class="filesChanged">${p.editType.name}</td>
      <td>${p.path}</td>
    </tr>
        <% }
      }
    }
    if ( !hadChanges ) { %>
    <tr>
      <td colspan="2">No Changes</td>
    </tr>
    <% } %>
  </table>
  <br/>
  <% } %>

<!-- ARTIFACTS -->
  <% 
  def artifacts = build.artifacts
  if ( artifacts != null && artifacts.size() > 0 ) { %>
  <table class="section">
    <tr class="tr-title">
      <td class="td-title">BUILD ARTIFACTS</td>
    </tr>
    <% artifacts.each() {
      f -> %>
      <tr>
        <td>
          <a href="${rooturl}${build.url}artifact/${f}">${f}</a>
      </td>
    </tr>
    <% } %>
  </table>
  <br/>
  <% } %>

<!-- MAVEN ARTIFACTS -->
  <%
  try {
    def mbuilds = build.moduleBuilds
    if ( mbuilds != null ) { %>
  <table class="section">
    <tr class="tr-title">
      <td class="td-title">BUILD ARTIFACTS</td>
    </tr>
      <%
      try {
        mbuilds.each() {
          m -> %>
    <tr>
      <td class="td-header-maven-module">${m.key.displayName}</td>
    </tr>
          <%
          m.value.each() { 
            mvnbld -> def artifactz = mvnbld.artifacts
            if ( artifactz != null && artifactz.size() > 0) { %>
    <tr>
      <td class="td-maven-artifact">
              <% artifactz.each() {
                f -> %>
        <a href="${rooturl}${mvnbld.url}artifact/${f}">${f}</a><br/>
              <% } %>
      </td>
    </tr>
            <% }
          }
        }
      } catch(e) {
        // we don't do anything
      } %>
  </table>
  <br/>
    <% }
  } catch(e) {
    // we don't do anything
  } %>

<!-- CONSOLE OUTPUT -->
  <%
  if ( build.result == hudson.model.Result.FAILURE ) { %>
  <table class="section" cellpadding="0" cellspacing="0">
    <tr class="tr-title">
      <td class="td-title">CONSOLE OUTPUT</td>
    </tr>
    <% 	build.getLog(100).each() {
      line -> %>
	  <tr>
      <td class="console">${org.apache.commons.lang.StringEscapeUtils.escapeHtml(line)}</td>
    </tr>
    <% } %>
  </table>
  <br/>
  <% } %>
</BODY>
